// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let canvas, ctx;
let isDrawing = false;
let lastX = 0, lastY = 0;
let startX = 0, startY = 0;
let currentTool = 'brush';
let savedImageData = null;
let currentBackground = 'transparent';

// –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
let history = [];
let historyIndex = -1;
const MAX_HISTORY = 20;

// –°–∏—Å—Ç–µ–º–∞ —Å–ª–æ–µ–≤
let layers = [];
let activeLayerIndex = 0;

// –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞
let peer = null;
let currentSession = null;
let connections = [];
let collabActive = false;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
let panelsState = {
    layers: false,
    templates: false,
    collab: false
};

// –ö–ª–∞—Å—Å —Å–ª–æ—è
class Layer {
    constructor(name = '–ù–æ–≤—ã–π —Å–ª–æ–π') {
        this.id = Date.now() + Math.random();
        this.name = name;
        this.visible = true;
        this.opacity = 1;
        this.blendMode = 'source-over';
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext('2d');
        this.resize();
    }

    resize() {
        this.canvas.width = canvas.width;
        this.canvas.height = canvas.height;
    }

    clear() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }

    draw() {
        if (!this.visible) return;
        
        ctx.globalAlpha = this.opacity;
        ctx.globalCompositeOperation = this.blendMode;
        ctx.drawImage(this.canvas, 0, 0);
        
        // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ctx.globalAlpha = 1;
        ctx.globalCompositeOperation = 'source-over';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Paint Messenger...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
    tg.ready();
    tg.expand();
    tg.enableClosingConfirmation();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    initializeCanvas();
    initializeLayers();
    initializeTools();
    initializePanels();
    initializeSaveFunctions();
    initializeCollaboration();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
    applyTelegramTheme();
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

function initializeCanvas() {
    canvas = document.getElementById('paintCanvas');
    ctx = canvas.getContext('2d');
    resizeCanvas();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', resizeCanvas);
}

function resizeCanvas() {
    const rect = canvas.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;
    
    canvas.width = rect.width * dpr;
    canvas.height = rect.height * dpr;
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    ctx.scale(dpr, dpr);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    canvas.style.width = rect.width + 'px';
    canvas.style.height = rect.height + 'px';
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å–ª–æ–µ–≤
    layers.forEach(layer => layer.resize());
    redrawCanvas();
    
    console.log('üìê –•–æ–ª—Å—Ç –ø–µ—Ä–µ—Ä–∞–∑–º–µ—Ä–µ–Ω:', canvas.width, canvas.height);
}

function initializeLayers() {
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ—è
    const baseLayer = new Layer('–§–æ–Ω');
    layers.push(baseLayer);
    activeLayerIndex = 0;
    
    updateLayersUI();
    console.log('üìö –°–∏—Å—Ç–µ–º–∞ —Å–ª–æ–µ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

function initializeTools() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∏—Å—Ç–∏
    updateBrushSettings();
    
    console.log('üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

function initializePanels() {
    // –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    hideAllPanels();
    
    console.log('üì¶ –ü–∞–Ω–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

function initializeSaveFunctions() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    console.log('üíæ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

function initializeCollaboration() {
    try {
        peer = new Peer({
            config: {
                iceServers: [
                    { urls: 'stun:stun.l.google.com:19302' },
                    { urls: 'stun:global.stun.twilio.com:3478' }
                ]
            }
        });
        
        peer.on('open', function(id) {
            console.log('üîó Peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, ID:', id);
            document.getElementById('sessionId').value = id;
            updateCollabStatus('–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é');
        });
        
        peer.on('connection', function(conn) {
            setupConnection(conn);
        });
        
        peer.on('error', function(err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Peer:', err);
            updateCollabStatus('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        });
        
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É:', error);
        updateCollabStatus('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—è–º–∏
function togglePanel(panelName) {
    const panel = document.getElementById(panelName + 'Panel');
    
    if (panelsState[panelName]) {
        panel.style.display = 'none';
        panelsState[panelName] = false;
    } else {
        hideAllPanels();
        panel.style.display = 'block';
        panelsState[panelName] = true;
    }
}

function hideAllPanels() {
    document.querySelectorAll('.panel').forEach(panel => {
        panel.style.display = 'none';
    });
    
    Object.keys(panelsState).forEach(key => {
        panelsState[key] = false;
    });
}

// –°–∏—Å—Ç–µ–º–∞ —Å–ª–æ–µ–≤
function updateLayersUI() {
    const layersList = document.getElementById('layersList');
    layersList.innerHTML = '';
    
    layers.forEach((layer, index) => {
        const layerElement = document.createElement('div');
        layerElement.className = `layer-item ${index === activeLayerIndex ? 'active' : ''}`;
        layerElement.innerHTML = `
            <span class="layer-visibility">${layer.visible ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}</span>
            <span class="layer-name">${layer.name}</span>
            <span class="layer-opacity">${Math.round(layer.opacity * 100)}%</span>
        `;
        
        layerElement.addEventListener('click', (e) => {
            if (e.target.classList.contains('layer-visibility')) {
                layer.visible = !layer.visible;
                redrawCanvas();
            } else {
                setActiveLayer(index);
            }
            updateLayersUI();
        });
        
        layersList.appendChild(layerElement);
    });
}

function setActiveLayer(index) {
    if (index >= 0 && index < layers.length) {
        activeLayerIndex = index;
        updateLayersUI();
        redrawCanvas();
    }
}

function addNewLayer() {
    const newLayer = new Layer(`–°–ª–æ–π ${layers.length + 1}`);
    layers.push(newLayer);
    setActiveLayer(layers.length - 1);
    
    tg.HapticFeedback.impactOccurred('light');
}

function mergeLayers() {
    if (layers.length <= 1) {
        tg.showPopup({
            title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            message: '–ù–µ—á–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å',
            buttons: [{ type: 'ok' }]
        });
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = canvas.width;
    tempCanvas.height = canvas.height;
    const tempCtx = tempCanvas.getContext('2d');
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ–∏
    layers.forEach(layer => {
        if (layer.visible) {
            tempCtx.globalAlpha = layer.opacity;
            tempCtx.globalCompositeOperation = layer.blendMode;
            tempCtx.drawImage(layer.canvas, 0, 0);
        }
    });
    
    // –û—á–∏—â–∞–µ–º —Å–ª–æ–∏ –∏ —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π
    const mergedLayer = new Layer('–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–π');
    mergedLayer.ctx.drawImage(tempCanvas, 0, 0);
    
    layers = [mergedLayer];
    setActiveLayer(0);
    
    tg.HapticFeedback.impactOccurred('medium');
    tg.showPopup({
        title: '–£—Å–ø–µ—Ö',
        message: '–°–ª–æ–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã',
        buttons: [{ type: 'ok' }]
    });
}

function redrawCanvas() {
    // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –†–∏—Å—É–µ–º –≤—Å–µ —Å–ª–æ–∏
    layers.forEach(layer => layer.draw());
}

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è
function updateBrushSettings() {
    const activeLayer = layers[activeLayerIndex];
    const layerCtx = activeLayer.ctx;
    
    layerCtx.lineJoin = 'round';
    layerCtx.lineCap = 'round';
    layerCtx.lineWidth = document.getElementById('brushSize').value;
    
    if (currentTool === 'eraser') {
        layerCtx.strokeStyle = '#FFFFFF';
        layerCtx.globalCompositeOperation = 'destination-out';
    } else {
        layerCtx.strokeStyle = document.getElementById('colorPicker').value;
        layerCtx.globalCompositeOperation = 'source-over';
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ –∫–∏—Å—Ç–∏
    const brushType = document.getElementById('brushType').value;
    switch(brushType) {
        case 'dashed':
            layerCtx.setLineDash([5, 5]);
            break;
        default:
            layerCtx.setLineDash([]);
    }
}

function selectTool(tool) {
    currentTool = tool;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.tool-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.getElementById(tool + 'Btn').classList.add('active');
    
    updateBrushSettings();
    
    tg.HapticFeedback.selectionChangedOccurred();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–∏—Å–æ–≤–∞–Ω–∏—è
function getCoordinates(e) {
    const rect = canvas.getBoundingClientRect();
    let clientX, clientY;
    
    if (e.type.includes('touch')) {
        clientX = e.touches[0].clientX;
        clientY = e.touches[0].clientY;
    } else {
        clientX = e.clientX;
        clientY = e.clientY;
    }
    
    return {
        x: (clientX - rect.left) * (canvas.width / rect.width),
        y: (clientY - rect.top) * (canvas.height / rect.height)
    };
}

function startDrawing(e) {
    if (panelsState.layers || panelsState.templates || panelsState.collab) return;
    
    const activeLayer = layers[activeLayerIndex];
    const layerCtx = activeLayer.ctx;
    
    isDrawing = true;
    const coords = getCoordinates(e);
    [startX, startY] = [coords.x, coords.y];
    [lastX, lastY] = [coords.x, coords.y];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
    if (['line', 'rect', 'circle'].includes(currentTool)) {
        savedImageData = layerCtx.getImageData(0, 0, canvas.width, canvas.height);
    }
    
    if (currentTool === 'brush' || currentTool === 'eraser') {
        layerCtx.beginPath();
        layerCtx.moveTo(lastX, lastY);
    }
    
    if (currentTool === 'text') {
        addText(startX, startY);
        isDrawing = false;
    }
    
    e.preventDefault();
}

function draw(e) {
    if (!isDrawing) return;
    
    const activeLayer = layers[activeLayerIndex];
    const layerCtx = activeLayer.ctx;
    const coords = getCoordinates(e);
    const currentX = coords.x;
    const currentY = coords.y;
    
    updateBrushSettings();
    
    switch(currentTool) {
        case 'brush':
        case 'eraser':
            layerCtx.lineTo(currentX, currentY);
            layerCtx.stroke();
            [lastX, lastY] = [currentX, currentY];
            break;
            
        case 'line':
            layerCtx.putImageData(savedImageData, 0, 0);
            layerCtx.beginPath();
            layerCtx.moveTo(startX, startY);
            layerCtx.lineTo(currentX, currentY);
            layerCtx.stroke();
            break;
            
        case 'rect':
            layerCtx.putImageData(savedImageData, 0, 0);
            layerCtx.strokeRect(startX, startY, currentX - startX, currentY - startY);
            break;
            
        case 'circle':
            layerCtx.putImageData(savedImageData, 0, 0);
            const radius = Math.sqrt(Math.pow(currentX - startX, 2) + Math.pow(currentY - startY, 2));
            layerCtx.beginPath();
            layerCtx.arc(startX, startY, radius, 0, 2 * Math.PI);
            layerCtx.stroke();
            break;
    }
    
    redrawCanvas();
    e.preventDefault();
}

function stopDrawing() {
    if (isDrawing) {
        isDrawing = false;
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        if (collabActive && connections.length > 0) {
            broadcastDrawingData();
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if (['line', 'rect', 'circle', 'brush', 'eraser'].includes(currentTool)) {
            saveState();
        }
        
        savedImageData = null;
    }
}

// –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
function saveState() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–µ–≤
    const state = layers.map(layer => ({
        ...layer,
        canvasData: layer.canvas.toDataURL()
    }));
    
    history = history.slice(0, historyIndex + 1);
    history.push(state);
    historyIndex++;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (history.length > MAX_HISTORY) {
        history.shift();
        historyIndex--;
    }
}

function restoreState(state) {
    state.forEach((layerState, index) => {
        if (layers[index]) {
            const img = new Image();
            img.onload = function() {
                layers[index].ctx.clearRect(0, 0, canvas.width, canvas.height);
                layers[index].ctx.drawImage(img, 0, 0);
                redrawCanvas();
            };
            img.src = layerState.canvasData;
        }
    });
}

function undo() {
    if (historyIndex > 0) {
        historyIndex--;
        restoreState(history[historyIndex]);
        tg.HapticFeedback.impactOccurred('light');
    }
}

function redo() {
    if (historyIndex < history.length - 1) {
        historyIndex++;
        restoreState(history[historyIndex]);
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –¢–µ–∫—Å—Ç
function addText(x, y) {
    const text = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:');
    if (text) {
        const activeLayer = layers[activeLayerIndex];
        const layerCtx = activeLayer.ctx;
        
        layerCtx.font = `${document.getElementById('brushSize').value * 5}px Arial`;
        layerCtx.fillStyle = document.getElementById('colorPicker').value;
        layerCtx.fillText(text, x, y);
        
        redrawCanvas();
        saveState();
    }
}

// –§–æ–Ω—ã –∏ —à–∞–±–ª–æ–Ω—ã
function setBackground(type) {
    currentBackground = type;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = canvas.width;
    tempCanvas.height = canvas.height;
    const tempCtx = tempCanvas.getContext('2d');
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    layers.forEach(layer => {
        if (layer.visible) {
            tempCtx.drawImage(layer.canvas, 0, 0);
        }
    });
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª–æ–∏
    layers.forEach(layer => layer.clear());
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –Ω–∞ –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π
    const baseLayer = layers[0];
    baseLayer.ctx.fillStyle = '#FFFFFF';
    
    switch(type) {
        case 'white':
            baseLayer.ctx.fillRect(0, 0, canvas.width, canvas.height);
            break;
        case 'grid':
            drawGridBackground(baseLayer.ctx);
            break;
        case 'lined':
            drawLinedBackground(baseLayer.ctx);
            break;
        case 'graph':
            drawGraphBackground(baseLayer.ctx);
            break;
        case 'transparent':
            // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π - –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∏—Å—É–µ–º
            break;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
    baseLayer.ctx.drawImage(tempCanvas, 0, 0);
    redrawCanvas();
    saveState();
}

function drawGridBackground(context) {
    context.fillStyle = '#FFFFFF';
    context.fillRect(0, 0, canvas.width, canvas.height);
    
    context.strokeStyle = '#e0e0e0';
    context.lineWidth = 1;
    
    const gridSize = 20;
    for (let x = 0; x < canvas.width; x += gridSize) {
        context.beginPath();
        context.moveTo(x, 0);
        context.lineTo(x, canvas.height);
        context.stroke();
    }
    for (let y = 0; y < canvas.height; y += gridSize) {
        context.beginPath();
        context.moveTo(0, y);
        context.lineTo(canvas.width, y);
        context.stroke();
    }
}

function drawLinedBackground(context) {
    context.fillStyle = '#FFFFFF';
    context.fillRect(0, 0, canvas.width, canvas.height);
    
    context.strokeStyle = '#87CEEB';
    context.lineWidth = 1;
    
    const lineSpacing = 24;
    for (let y = lineSpacing; y < canvas.height; y += lineSpacing) {
        context.beginPath();
        context.moveTo(0, y);
        context.lineTo(canvas.width, y);
        context.stroke();
    }
    
    // –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π
    context.strokeStyle = '#FF0000';
    context.beginPath();
    context.moveTo(40, 0);
    context.lineTo(40, canvas.height);
    context.stroke();
}

function drawGraphBackground(context) {
    context.fillStyle = '#FFFFFF';
    context.fillRect(0, 0, canvas.width, canvas.height);
    
    context.strokeStyle = '#d0d0d0';
    context.lineWidth = 1;
    
    const gridSize = 10;
    for (let x = 0; x < canvas.width; x += gridSize) {
        context.beginPath();
        context.moveTo(x, 0);
        context.lineTo(x, canvas.height);
        context.stroke();
    }
    for (let y = 0; y < canvas.height; y += gridSize) {
        context.beginPath();
        context.moveTo(0, y);
        context.lineTo(canvas.width, y);
        context.stroke();
    }
}

// –®–∞–±–ª–æ–Ω—ã
const templates = {
    comic: function() {
        setBackground('white');
        const activeLayer = layers[activeLayerIndex];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫–∏ –¥–ª—è –∫–æ–º–∏–∫—Å–∞
        activeLayer.ctx.strokeStyle = '#000000';
        activeLayer.ctx.lineWidth = 3;
        const panelHeight = canvas.height / 3;
        for (let i = 1; i < 3; i++) {
            activeLayer.ctx.beginPath();
            activeLayer.ctx.moveTo(0, panelHeight * i);
            activeLayer.ctx.lineTo(canvas.width, panelHeight * i);
            activeLayer.ctx.stroke();
        }
        
        redrawCanvas();
        saveState();
    },
    
    storyboard: function() {
        setBackground('white');
        const activeLayer = layers[activeLayerIndex];
        
        activeLayer.ctx.strokeStyle = '#cccccc';
        activeLayer.ctx.lineWidth = 2;
        const frameWidth = canvas.width / 3;
        const frameHeight = canvas.height / 4;
        
        for (let x = 0; x < 3; x++) {
            for (let y = 0; y < 4; y++) {
                activeLayer.ctx.strokeRect(
                    x * frameWidth + 5, 
                    y * frameHeight + 5, 
                    frameWidth - 10, 
                    frameHeight - 10
                );
            }
        }
        
        redrawCanvas();
        saveState();
    },
    
    mindmap: function() {
        setBackground('white');
        const activeLayer = layers[activeLayerIndex];
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        activeLayer.ctx.fillStyle = '#4CAF50';
        activeLayer.ctx.beginPath();
        activeLayer.ctx.arc(canvas.width / 2, canvas.height / 2, 40, 0, Math.PI * 2);
        activeLayer.ctx.fill();
        
        activeLayer.ctx.fillStyle = '#FFFFFF';
        activeLayer.ctx.font = 'bold 16px Arial';
        activeLayer.ctx.textAlign = 'center';
        activeLayer.ctx.fillText('–¢–µ–º–∞', canvas.width / 2, canvas.height / 2 + 5);
        
        redrawCanvas();
        saveState();
    },
    
    ui: function() {
        setBackground('grid');
        const activeLayer = layers[activeLayerIndex];
        
        // –ë–∞–∑–æ–≤–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è UI
        activeLayer.ctx.fillStyle = '#f0f0f0';
        activeLayer.ctx.fillRect(0, 0, canvas.width, 60); // Header
        activeLayer.ctx.fillRect(0, canvas.height - 80, canvas.width, 80); // Footer
        
        activeLayer.ctx.fillStyle = '#2481cc';
        activeLayer.ctx.fillRect(10, 10, 40, 40); // Logo
        
        redrawCanvas();
        saveState();
    },
    
    flowchart: function() {
        setBackground('white');
        const activeLayer = layers[activeLayerIndex];
        
        activeLayer.ctx.strokeStyle = '#333333';
        activeLayer.ctx.lineWidth = 2;
        
        // –ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª–æ–∫-—Å—Ö–µ–º—ã
        const startY = 50;
        activeLayer.ctx.strokeRect(canvas.width/2 - 40, startY, 80, 40);
        activeLayer.ctx.fillText('–ù–∞—á–∞–ª–æ', canvas.width/2, startY + 25);
        
        redrawCanvas();
        saveState();
    },
    
    sketch: function() {
        setBackground('lined');
        const activeLayer = layers[activeLayerIndex];
        
        // –õ–µ–≥–∫–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è —ç—Å–∫–∏–∑–æ–≤
        activeLayer.ctx.strokeStyle = '#f0f0f0';
        activeLayer.ctx.lineWidth = 1;
        
        for (let x = 0; x < canvas.width; x += 50) {
            activeLayer.ctx.beginPath();
            activeLayer.ctx.moveTo(x, 0);
            activeLayer.ctx.lineTo(x, canvas.height);
            activeLayer.ctx.stroke();
        }
        
        for (let y = 0; y < canvas.height; y += 50) {
            activeLayer.ctx.beginPath();
            activeLayer.ctx.moveTo(0, y);
            activeLayer.ctx.lineTo(canvas.width, y);
            activeLayer.ctx.stroke();
        }
        
        redrawCanvas();
        saveState();
    }
};

// –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞
function setupConnection(conn) {
    connections.push(conn);
    
    conn.on('data', function(data) {
        handleIncomingData(data);
    });
    
    conn.on('open', function() {
        updateCollabStatus(`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${connections.length + 1}`);
        tg.showPopup({
            title: '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
            message: '–ö—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏',
            buttons: [{ type: 'ok' }]
        });
    });
    
    conn.on('close', function() {
        connections = connections.filter(c => c !== conn);
        updateUsersList();
        updateCollabStatus(`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${connections.length + 1}`);
    });
    
    conn.on('error', function(err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err);
    });
    
    updateUsersList();
    collabActive = true;
}

function handleIncomingData(data) {
    switch(data.type) {
        case 'drawing':
            replayDrawing(data);
            break;
        case 'clear':
            clearCanvas();
            break;
        case 'layer_data':
            restoreLayerData(data);
            break;
    }
}

function replayDrawing(data) {
    const layer = layers.find(l => l.id === data.layerId) || layers[activeLayerIndex];
    const layerCtx = layer.ctx;
    
    layerCtx.strokeStyle = data.color;
    layerCtx.lineWidth = data.lineWidth;
    layerCtx.globalCompositeOperation = data.tool === 'eraser' ? 'destination-out' : 'source-over';
    
    layerCtx.beginPath();
    layerCtx.moveTo(data.startX, data.startY);
    layerCtx.lineTo(data.endX, data.endY);
    layerCtx.stroke();
    
    redrawCanvas();
}

function broadcastDrawingData() {
    const activeLayer = layers[activeLayerIndex];
    const drawingData = {
        type: 'drawing',
        layerId: activeLayer.id,
        startX: startX,
        startY: startY,
        endX: lastX,
        endY: lastY,
        color: currentTool === 'eraser' ? '#FFFFFF' : document.getElementById('colorPicker').value,
        lineWidth: document.getElementById('brushSize').value,
        tool: currentTool
    };
    
    connections.forEach(conn => {
        if (conn.open) {
            conn.send(drawingData);
        }
    });
}

function startCollaboration() {
    if (!peer) {
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
            buttons: [{ type: 'ok' }]
        });
        return;
    }
    
    currentSession = peer.id;
    collabActive = true;
    
    tg.showPopup({
        title: '–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞',
        message: `ID: ${peer.id}\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º ID —Å –¥—Ä—É–∑—å—è–º–∏`,
        buttons: [{ type: 'ok' }]
    });
    
    updateCollabStatus('–û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
}

function joinCollaboration() {
    const sessionId = document.getElementById('sessionId').value.trim();
    if (!sessionId) {
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏',
            buttons: [{ type: 'ok' }]
        });
        return;
    }
    
    if (!peer) {
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
            buttons: [{ type: 'ok' }]
        });
        return;
    }
    
    try {
        const conn = peer.connect(sessionId);
        setupConnection(conn);
        
        conn.on('open', function() {
            currentSession = sessionId;
            collabActive = true;
            updateCollabStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Å—Å–∏–∏');
            
            tg.showPopup({
                title: '–£—Å–ø–µ—Ö',
                message: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏',
                buttons: [{ type: 'ok' }]
            });
        });
        
        conn.on('error', function(err) {
            tg.showPopup({
                title: '–û—à–∏–±–∫–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
                buttons: [{ type: 'ok' }]
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Å—Å–∏–∏',
            buttons: [{ type: 'ok' }]
        });
    }
}

function updateUsersList() {
    const usersList = document.getElementById('usersList');
    usersList.innerHTML = `
        <div>üë§ –í—ã (–≤–ª–∞–¥–µ–ª–µ—Ü)</div>
        ${connections.map((conn, index) => `<div>üë§ –£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}</div>`).join('')}
    `;
}

function updateCollabStatus(status) {
    const statusElement = document.getElementById('collabStatus');
    statusElement.textContent = status;
    
    if (status.includes('–û—à–∏–±–∫–∞') || status.includes('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')) {
        statusElement.className = 'collab-status disconnected';
    } else if (status.includes('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ') || status.includes('–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤')) {
        statusElement.className = 'collab-status connected';
    } else {
        statusElement.className = 'collab-status';
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç
function saveAsPNG() {
    const link = document.createElement('a');
    link.download = `paint-messenger-${Date.now()}.png`;
    link.href = canvas.toDataURL('image/png');
    link.click();
    
    tg.HapticFeedback.notificationOccurred('success');
}

function saveAsJPG() {
    const link = document.createElement('a');
    link.download = `paint-messenger-${Date.now()}.jpg`;
    link.href = canvas.toDataURL('image/jpeg', 0.92);
    link.click();
    
    tg.HapticFeedback.notificationOccurred('success');
}

async function copyToClipboard() {
    try {
        const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));
        await navigator.clipboard.write([
            new ClipboardItem({ 'image/png': blob })
        ]);
        
        tg.showPopup({
            title: '–£—Å–ø–µ—Ö',
            message: '–†–∏—Å—É–Ω–æ–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
            buttons: [{ type: 'ok' }]
        });
        
        tg.HapticFeedback.notificationOccurred('success');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
            buttons: [{ type: 'ok' }]
        });
    }
}

function shareDrawing() {
    canvas.toBlob(function(blob) {
        if (navigator.share) {
            navigator.share({
                files: [new File([blob], '–º–æ–π-—Ä–∏—Å—É–Ω–æ–∫.png', { type: 'image/png' })],
                title: '–ú–æ–π —Ä–∏—Å—É–Ω–æ–∫ –∏–∑ Paint Messenger',
                text: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ —è –Ω–∞—Ä–∏—Å–æ–≤–∞–ª!'
            }).catch(() => {
                // Fallback –µ—Å–ª–∏ —à–∞—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω
                saveAsPNG();
            });
        } else {
            saveAsPNG();
        }
    });
}

function clearCanvas() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Ö–æ–ª—Å—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        layers.forEach(layer => layer.clear());
        redrawCanvas();
        saveState();
        
        if (collabActive) {
            connections.forEach(conn => {
                if (conn.open) {
                    conn.send({ type: 'clear' });
                }
            });
        }
        
        tg.HapticFeedback.impactOccurred('heavy');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function applyTelegramTheme() {
    document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
    document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
    document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
    document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
    document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f0f0f0');
}

function loadCustomBackground() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = function(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = function(event) {
            const img = new Image();
            img.onload = function() {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                const tempCanvas = document.createElement('canvas');
                tempCanvas.width = canvas.width;
                tempCanvas.height = canvas.height;
                const tempCtx = tempCanvas.getContext('2d');
                
                layers.forEach(layer => {
                    if (layer.visible) {
                        tempCtx.drawImage(layer.canvas, 0, 0);
                    }
                });
                
                // –û—á–∏—â–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω
                layers.forEach(layer => layer.clear());
                layers[0].ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                layers[0].ctx.drawImage(tempCanvas, 0, 0);
                
                redrawCanvas();
                saveState();
                currentBackground = 'custom';
                
                tg.showPopup({
                    title: '–£—Å–ø–µ—Ö',
                    message: '–§–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                    buttons: [{ type: 'ok' }]
                });
            };
            img.src = event.target.result;
        };
        reader.readAsDataURL(file);
    };
    input.click();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    document.getElementById('brushBtn').addEventListener('click', () => selectTool('brush'));
    document.getElementById('lineBtn').addEventListener('click', () => selectTool('line'));
    document.getElementById('rectBtn').addEventListener('click', () => selectTool('rect'));
    document.getElementById('circleBtn').addEventListener('click', () => selectTool('circle'));
    document.getElementById('textBtn').addEventListener('click', () => selectTool('text'));
    document.getElementById('eraserBtn').addEventListener('click', () => selectTool('eraser'));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∏—Å—Ç–∏
    document.getElementById('colorPicker').addEventListener('input', updateBrushSettings);
    document.getElementById('brushSize').addEventListener('input', updateBrushSettings);
    document.getElementById('brushType').addEventListener('change', updateBrushSettings);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    document.getElementById('undoBtn').addEventListener('click', undo);
    document.getElementById('redoBtn').addEventListener('click', redo);
    document.getElementById('clearBtn').addEventListener('click', clearCanvas);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–µ–π
    document.getElementById('toggleLayers').addEventListener('click', () => togglePanel('layers'));
    document.getElementById('toggleTemplates').addEventListener('click', () => togglePanel('templates'));
    document.getElementById('toggleCollab').addEventListener('click', () => togglePanel('collab'));
    
    document.getElementById('closeLayers').addEventListener('click', () => togglePanel('layers'));
    document.getElementById('closeTemplates').addEventListener('click', () => togglePanel('templates'));
    document.getElementById('closeCollab').addEventListener('click', () => togglePanel('collab'));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ª–æ–µ–≤
    document.getElementById('addLayer').addEventListener('click', addNewLayer);
    document.getElementById('mergeLayers').addEventListener('click', mergeLayers);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ–Ω–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
    document.getElementById('backgroundSelect').addEventListener('change', function() {
        setBackground(this.value);
    });
    document.getElementById('customBgBtn').addEventListener('click', loadCustomBackground);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
    document.querySelectorAll('.template-item').forEach(item => {
        item.addEventListener('click', function() {
            const template = this.getAttribute('data-template');
            if (templates[template]) {
                templates[template]();
                togglePanel('templates');
                
                tg.showPopup({
                    title: '–®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω',
                    message: `–®–∞–±–ª–æ–Ω "${this.querySelector('span').textContent}" –∑–∞–≥—Ä—É–∂–µ–Ω`,
                    buttons: [{ type: 'ok' }]
                });
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    document.getElementById('startCollab').addEventListener('click', startCollaboration);
    document.getElementById('joinCollab').addEventListener('click', joinCollaboration);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    document.getElementById('savePNG').addEventListener('click', saveAsPNG);
    document.getElementById('saveJPG').addEventListener('click', saveAsJPG);
    document.getElementById('copyClipboard').addEventListener('click', copyToClipboard);
    document.getElementById('shareBtn').addEventListener('click', shareDrawing);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ö–æ–ª—Å—Ç–∞
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseout', stopDrawing);
    
    canvas.addEventListener('touchstart', startDrawing);
    canvas.addEventListener('touchmove', draw);
    canvas.addEventListener('touchend', stopDrawing);
    canvas.addEventListener('touchcancel', stopDrawing);
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è touch —Å–æ–±—ã—Ç–∏–π
    canvas.addEventListener('touchstart', (e) => e.preventDefault());
    canvas.addEventListener('touchmove', (e) => e.preventDefault());
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case 'z':
                    e.preventDefault();
                    undo();
                    break;
                case 'y':
                    e.preventDefault();
                    redo();
                    break;
                case 's':
                    e.preventDefault();
                    saveAsPNG();
                    break;
            }
        }
        
        // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–µ–π
        if (e.key === 'Escape') {
            hideAllPanels();
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.panel') && 
            !e.target.closest('#toggleLayers') && 
            !e.target.closest('#toggleTemplates') && 
            !e.target.closest('#toggleCollab')) {
            hideAllPanels();
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', e.error);
    
    tg.showPopup({
        title: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å.',
        buttons: [{ type: 'ok' }]
    });
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
tg.showAlert('Paint Messenger –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üé®');